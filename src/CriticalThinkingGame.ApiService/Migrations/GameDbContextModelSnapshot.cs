// <auto-generated />
using System;
using CriticalThinkingGame.ApiService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CriticalThinkingGame.ApiService.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.GameSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameTextId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GameTextId");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.GameSessionFallacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameSessionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SelectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TextFallacyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("TextFallacyId");

                    b.ToTable("GameSessionFallacies");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.GameText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("GameTexts");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.LogicalFallacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("LogicalFallacies");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.LogicalFallacyTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("LogicalFallacyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LogicalFallacyId", "LanguageId")
                        .IsUnique();

                    b.ToTable("LogicalFallacyTranslations");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.TextFallacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EndIndex")
                        .HasColumnType("integer");

                    b.Property<int>("GameTextId")
                        .HasColumnType("integer");

                    b.Property<int>("LogicalFallacyId")
                        .HasColumnType("integer");

                    b.Property<int>("StartIndex")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameTextId");

                    b.HasIndex("LogicalFallacyId");

                    b.ToTable("TextFallacies");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.GameSession", b =>
                {
                    b.HasOne("CriticalThinkingGame.ApiService.Models.GameText", "GameText")
                        .WithMany("GameSessions")
                        .HasForeignKey("GameTextId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameText");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.GameSessionFallacy", b =>
                {
                    b.HasOne("CriticalThinkingGame.ApiService.Models.GameSession", "GameSession")
                        .WithMany("SelectedFallacies")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CriticalThinkingGame.ApiService.Models.TextFallacy", "TextFallacy")
                        .WithMany("GameSessionFallacies")
                        .HasForeignKey("TextFallacyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameSession");

                    b.Navigation("TextFallacy");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.GameText", b =>
                {
                    b.HasOne("CriticalThinkingGame.ApiService.Models.Language", "Language")
                        .WithMany("GameTexts")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.LogicalFallacyTranslation", b =>
                {
                    b.HasOne("CriticalThinkingGame.ApiService.Models.Language", "Language")
                        .WithMany("LogicalFallacyTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CriticalThinkingGame.ApiService.Models.LogicalFallacy", "LogicalFallacy")
                        .WithMany("Translations")
                        .HasForeignKey("LogicalFallacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LogicalFallacy");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.TextFallacy", b =>
                {
                    b.HasOne("CriticalThinkingGame.ApiService.Models.GameText", "GameText")
                        .WithMany("TextFallacies")
                        .HasForeignKey("GameTextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CriticalThinkingGame.ApiService.Models.LogicalFallacy", "LogicalFallacy")
                        .WithMany("TextFallacies")
                        .HasForeignKey("LogicalFallacyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameText");

                    b.Navigation("LogicalFallacy");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.GameSession", b =>
                {
                    b.Navigation("SelectedFallacies");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.GameText", b =>
                {
                    b.Navigation("GameSessions");

                    b.Navigation("TextFallacies");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.Language", b =>
                {
                    b.Navigation("GameTexts");

                    b.Navigation("LogicalFallacyTranslations");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.LogicalFallacy", b =>
                {
                    b.Navigation("TextFallacies");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("CriticalThinkingGame.ApiService.Models.TextFallacy", b =>
                {
                    b.Navigation("GameSessionFallacies");
                });
#pragma warning restore 612, 618
        }
    }
}
